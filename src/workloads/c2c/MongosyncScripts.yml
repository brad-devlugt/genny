SchemaVersion: 2018-07-01

Description: |
  This is a collection of helper scripts used to communicate with mongosync. To use them,
  use LoadConfig and load the script you would like to use in your actor's phase.
  For example:
  - Name: StartMongosync
    Type: ExternalScriptRunner
    Threads: 1
    Phases:
      - LoadConfig:
        Path: ./MongosyncScripts.yml
        Key: StartMongosync

StartMongosync:
  Repeat: 1
  Command: python3
  MetricsName: StartMongosync
  Script: |
    import mongosync_actor as actor
    actor.change_state("/api/v1/start",
        {"Source": "cluster0", "Destination": "cluster1"})

PollForCEA:
  Repeat: 1
  Command: python3
  MetricsName: PollForCEA
  Script: |
    import mongosync_actor as actor
    actor.poll(lambda x: x != "change event application", "info")

DrainWrites:
  Repeat: 1
  Command: python3
  MetricsName: DrainWrites
  Script: |
    import mongosync_actor as actor
    actor.poll(lambda x: int(x) > 5, "lagTimeSeconds")

Commit:
  Repeat: 1
  Command: python3
  MetricsName: Commit
  Script: |
    import mongosync_actor as actor
    actor.change_state("/api/v1/commit", {})

WaitForCommit:
  Repeat: 1
  Command: python3
  MetricsName: WaitForCommit
  Script: |
    import mongosync_actor as actor
    actor.poll(lambda x: x != "COMMITTED", "state")

InsertShortTestData:
  Repeat: 1
  BatchSize: 100
  Threads: 1
  DocumentCount: 1000000
  Database: db

  # Note the document shape and number of collections doesn't
  # really matter here and we are generally just testing the
  # max throughput mongosync can achieve with an unbounded
  # insert workload
  CollectionCount: 1
  Document:
    a: { ^RandomInt: { min: 0, max: 1000000 } }
    b: { ^RandomString: { length: 8 } }
    c: { ^RandomString: { length: 20 } }
  Indexes:
  - keys: { id: 1 }
  - keys: { a: 1 }

SetupShardKey:
  Repeat: 1
  Database: admin
  # We also run this on replica sets and so we
  # ignore if this command fails
  ThrowOnFailure: false
  Operations:
  - OperationMetricsName: EnableShardingMetrics
    OperationName: AdminCommand
    OperationCommand:
      enableSharding: db

ShardCollection:
  Repeat: 1
  Database: admin
  ThrowOnFailure: false
  Operations:
  - OperationMetricsName: ShardCollectionMetrics
    OperationName: AdminCommand
    OperationCommand:
      shardCollection: db.Collection0
      key:
        _id: hashed
